/* javaFX Specifics */
plugins {
    id 'org.openjfx.javafxplugin' version "$javaFXPluginVersion"
}
javafx {
    version = "$javaFXVersion"
    modules = [ 'javafx.graphics' ]
}

/* Dependencies */
dependencies {
    implementation project(':jthemis-core')
    implementation project(':jmetis-javafx')
    implementation project(':jmetis-core')
    implementation project(':jtethys-javafx')
    implementation project(':jtethys-core')
}

/* Description */
description = 'Themis JavaFX Project Framework'

/* Specific Manifest details */
jar {
    manifest {
        from sharedManifest
        attributes(
            "Implementation-Title": project.description,
            "Main-Class": "net.sourceforge.joceanus.jthemis.ui.javafx.Themis4FX",
            "JavaFX-Preloader-Class": "net.sourceforge.joceanus.jthemis.ui.javafx.ThemisFXpreLoader",
            "Automatic-Module-Name": "net.sourceforge.joceanus.jthemis.javafx",
            "Class-Path": configurations.runtimeClasspath.collect { "../${appLibDir}" + standardizePath(it.absolutePath) }.join(' ')         
        )
    }
}

/* Copy dependency modules to distribution directory */
task buildDistribution {
    def jarName = project.name + "-" + version + ".jar"
    def fullJarName = "$projectDir/build/libs/$jarName"
    rootProject.ext.newRenameMap[fullJarName] = "${appBinDir}" + jarName
    configurations.runtimeClasspath.each { d ->
            def oldName = d.getAbsolutePath()
            def newName = "${appLibDir}" + standardizePath(d.getAbsolutePath())
            rootProject.ext.newRenameMap[oldName] = newName
    }
}
