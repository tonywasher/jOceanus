<document>
    <properties>
        <title>GordianKnot Lock</title>
        <author email="Tony.Washer@yahoo.co.uk">Tony Washer</author>
    </properties>
    <body>
        <section name="GordianKnot Lock">
            <subsection name="Overview">
                <p>GordianKnot provide three kinds of locks that are password protected.</p>
                <ol>
                    <li><strong>keySetLock</strong>s are provided to secure a keySet using a password. This keySet can be
                        automatically generated or be pre-existing. It can only be unlocked by the same factory that was used to lock it.</li>
                    <li><strong>factoryLock</strong>s are provided to secure a factory using a password. The factory to be locked can be
                        automatically generated or be pre-existing. It can be unlocked by any factory running on the same machine.</li>
                    <li><strong>keyPairLock</strong>s are provided to secure a randomly generated keySet using a password and a private asymmetric key.
                        It can be unlocked using any factory and the corresponding public asymmetric key.</li>
                </ol>
            </subsection>
            <subsection name="Password Algorithm">
                <subsection name="Creation Algorithm">
                    <ol>
                        <li>A random 32-bit seed <strong>S</strong> and a random 128-bit initVector <strong>V</strong> are generated.</li>
                        <li>A seededRandom based on <strong>S</strong> and the personalisation value
                            <strong>I<sub>3</sub></strong> is created, and used to create the following items
                            <ol>
                                <li>A set of three hMacs (all different) <strong>M<sub>1</sub></strong>, <strong>M<sub>2</sub></strong>
                                    and <strong>M<sub>3</sub></strong>.</li>
                                <li>A single secret hMac <strong>M<sub>S</sub></strong> with an 512-bit output.</li>
                                <li>A 512-bit length digest <strong>X</strong> is selected from the same seeded Random.</li>
                            </ol>
                        </li>
                        <li>Each of the hMacs is initialised with the password as the key</li>
                        <li>Each of the macs is updated with <strong>P</strong>, <strong>IV</strong> and the number of iterations <strong>L</strong> </li>
                        <li>Set input <strong>D<sub>1-3</sub></strong> and <strong>D<sub>S</sub></strong> to <strong>V</strong></li>
                        <li>Repeat the following loop <strong>L</strong> times
                            <ol>
                                <li>Update <strong>M<sub>1</sub></strong> with <strong>D<sub>2</sub></strong> and <strong>D<sub>3</sub></strong></li>
                                <li>Update <strong>M<sub>2</sub></strong> with <strong>D<sub>1</sub></strong> and <strong>D<sub>3</sub></strong></li>
                                <li>Update <strong>M<sub>3</sub></strong> with <strong>D<sub>1</sub></strong> and <strong>D<sub>2</sub></strong></li>
                                <li>Update <strong>M<sub>S</sub></strong> with <strong>D<sub>S</sub></strong> and <strong>D<sub>1-3</sub></strong></li>
                                <li>Build new <strong>D<sub>S</sub></strong> as the result of <strong>M<sub>S</sub></strong> and xor the result into <strong>C<sub>S</sub></strong>.
                                    Repeat for other macs.</li>
                            </ol>
                        </li>
                        <li>Update digest <strong>X</strong> with <strong>C<sub>1-3</sub></strong> and calculate the digest as
                            <strong>R<sub>X</sub></strong></li>
                        <li>Calculate external lock as the concatenation of <strong>S||V||R<sub>X</sub></strong></li>
                        <li>Create keys for the keySet using <strong>C<sub>S</sub></strong> as the secret</li>
                    </ol>
                </subsection>
                <subsection name="Derivation Algorithm">
                    <ol>
                        <li>Extract <strong>S</strong>, <strong>V</strong> and <strong>R<sub>X</sub></strong> from the external lock.</li>
                        <li>Repeat creation algorithm with <strong>S</strong>, <strong>V</strong> and the password</li>
                        <li>Compare the calculated <strong>R<sub>X</sub></strong> with the one extracted from the hash. Only create the keySet if it matches.</li>
                    </ol>
                </subsection>
                <subsection name="Sample">
                    <source>
/* Access factory */
final GordianFactory myBaseFactory = GordianGenerator.createFactory();
final GordianKeySetFactory myKeySetFactory = myBaseFactory.getKeySetFactory();

/* Create the hash and access the resultant keySet */
final GordianKeySetSpec mySpec = new GordianKeySetHashSpec(new GordianKeySetSpec(GordianLength.LEN_256));
final char[] myPassword = ...
final GordianKeySetHash myKeySetHash = myKeySetFactory.generateKeySetHash(mySpec, myPassword);
final GordianKeySet myKeySet = myKeySetHash.getKeySet();

/* Access hash and derive keySet from hash and password */
final byte[] myHash = myKeySetHash.getHash();
final GordianKeySetHash myResolved = myKeySetFactory.deriveKeySetHash(myHash, myPassword);
                    </source>
                </subsection>
            </subsection>
            <subsection name="keySetLock">
                <p>A keySetLock can be either be used to secure an existing keySet, or it can be used to create a new random keySet.</p>
                <subsection name="Sample">
                    <source>
/* Access factory */
final GordianFactory myBaseFactory = GordianGenerator.createFactory();
final GordianLockFactory myLockFactory = myBaseFactory.getLockFactory();

/* Create a lock for a new keySet */
final GordianPasswordLockSpec mySpec = new GordianPasswordLockSpec(new GordianKeySetSpec(GordianLength.LEN_256));
final char[] myPassword = ...
final GordianKeySetLock myLock = myLockFactory.newKeySetLock(mySpec, myPassword);
final GordianKeySet myKeySet = myLock.getKeySet();
final byte[] myLockBytes = myLock.getLockBytes();

/* Resolve the lock */
final GordianKeySetLock myResolved = myLockFactory.resolveKeySetLock(myLockBytes, myPassword);
                    </source>
                </subsection>
            </subsection>
            <subsection name="factoryLock">
                <p>A factoryLock can either be used to secure an existing factory, or it can be used to create a new random factory.</p>
                <subsection name="Sample">
                    <source>
/* Access factory */
final GordianFactory myBaseFactory = GordianGenerator.createFactory();
final GordianLockFactory myLockFactory = myBaseFactory.getLockFactory();

/* Create a lock for a new factory */
final GordianPasswordLockSpec mySpec = new GordianPasswordLockSpec(new GordianKeySetSpec(GordianLength.LEN_256));
final char[] myPassword = ...
final GordianFactoryLock myLock = myLockFactory.newFactoryLock(mySpec, myPassword);
final GordianFactory myFactory = myLock.getFactory();
final GordianKeySet myKeySet = myFactory.getEmbeddedKeySet();
final byte[] myLockBytes = myLock.getLockBytes();

/* Resolve the lock */
final GordianFactpryLock myResolved = myLockFactory.resolveFactoryLock(myLockBytes, myPassword);
                    </source>
                </subsection>
            </subsection>
            <subsection name="keyPairLock">
                <p>A keyPairLock can be used to create a new secured random keySet using an agreement-capable keypair.</p>
                <subsection name="Sample">
                <source>
/* Access factory */
final GordianFactory myBaseFactory = GordianGenerator.createFactory();
final GordianLockFactory myLockFactory = myBaseFactory.getLockFactory();
final GordianKeyPairFactory myKeyPairFactory = myBase.getKeyPairFactory();
final GordianAgreementFactory myAgreementFactory = myKeyPairFactory.getAgreementFactory();

/* Access keyPairGenerator and create sending/receiving pairs */
final GordianKeyPairSpec mySpec = GordianKeyPairSpec.dh(GordianDHGroup.FFDHE2048);
final GordianKeyPairGenerator myGenerator = myKeyPairFactory.getKeyPairGenerator(mySpec);
final GordianKeyPair myKeyPair = myGenerator.generateKeyPair();

/* Create a lock for a new keySet */
final GordianPasswordLockSpec mySpec = new GordianPasswordLockSpec(new GordianKeySetSpec(GordianLength.LEN_256));
final char[] myPassword = ...
final GordianKeyPairLock myLock = myLockFactory.newKeyPairLock(mySpec, myKeyPair, myPassword);
final GordianKeySet myKeySet = myLock.getKeySet();
final byte[] myLockBytes = myLock.getLockBytes();

/* Resolve the lock */
final GordianKeyPairLock myResolved = myLockFactory.resolveKeyPairLock(myLockBytes, myKeyPair, myPassword);
                    </source>
                </subsection>
            </subsection>
        </section>
    </body>
</document>