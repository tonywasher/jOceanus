<document>
    <properties>
        <title>GordianKnot Asymmetric Encryptors</title>
        <author email="Tony.Washer@yahoo.co.uk">Tony Washer</author>
    </properties>
    <body>
        <section name="Overview">
            <p>Encryptors are supported via the <strong>GordianEncryptorFactory</strong> interface.</p>
            <p>Algorithms are represented by <b>GordianEncryptorSpec</b>. A <b>GordianEncryptor</b> is obtained via the encryptorSpec,
                and then messages are encrypted/decrypted by the encryptor.</p>
        </section>
        <section name="Sample">
            <source>
                /* Access factory */
                final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                final GordianKeyPairFactory myKeyPairFactory = myBase.getKeyPairFactory();
                final GordianEncryptorFactory myEncryptorFactory = myKeyPairFactory.getEncryptorFactory();

                /* Access keyPairGenerator */
                final GordianKeyPairSpec mySpec = GordianKeyPairSpec.rsa(GordianRSAModulus.MOD2048);
                final GordianKeyPairGenerator myGenerator = myKeyPairFactory.getKeyPairGenerator(mySpec);
                final GordianKeyPair myPair = myGenerator.generateKeyPair();

                /* Access encryptor */
                final GordianEncryptorSpec myEncryptSpec = GordianEncryptorSpec.rsa(GordianDigestSpec.sha2(GordianLength.LEN_256));
                final GordianEncryptor myEncryptor = myEncryptorFactory.createEncryptor(myEncryptSpec);

                /* Encrypt message */
                final byte[] message = ....;
                myEncryptor.initForEncrypt(myPair);
                final byte[] myEncrypted = myEncryptor.encrypt(myMessage);

                /* Decrypt message */
                myEncryptor.initForDecrypt(myPair);
                final byte[] myResult = myEncryptor.decrypt(myEncrypted);
            </source>
        </section>
        <section name="Composite Encryptors">
            <p>Composite encryptions may be created by a composite keyPair, as long as each element of the composite keyPair is assigned a valid encryptorSpec.</p>
            <subsection name="Sample">
                <source>
                    /* Access factory */
                    final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                    final GordianKeyPairFactory myKeyPairFactory = myBase.getKeyPairFactory();
                    final GordianEncryptorFactory myEncryptorFactory = myKeyPairFactory.getEncryptorFactory();

                    /* Access keyPairGenerator */
                    final GordianKeyPairSpec mySpec = GordianKeyPairSpec.composite(GordianKeyPairSpec.rsa(GordianRSAModulus.MOD2048),
                                                                                   GordianKeyPairSpec.elGamal(GordianDHGroup.rfc7919_ffdhe2048));
                    final GordianKeyPairGenerator myGenerator = myKeyPairFactory.getKeyPairGenerator(mySpec);
                    final GordianKeyPair myPair = myGenerator.generateKeyPair();

                    /* Access encryptor */
                    final GordianEncryptorSpec myEncryptSpec = GordianEncryptorSpec.composite(GordianEncryptorSpec.rsa(GordianDigestSpec.sha2(GordianLength.LEN_256)),
                                                                                              GordianEncryptorSpec.elGamal(GordianDigestSpec.sha2(GordianLength.LEN_256)));
                    final GordianEncryptor myEncryptor = myEncryptorFactory.createEncryptor(myEncryptSpec);

                    /* Encrypt message */
                    final byte[] message = ....;
                    myEncryptor.initForEncrypt(myPair);
                    final byte[] myEncrypted = myEncryptor.encrypt(myMessage);

                    /* Decrypt message */
                    myEncryptor.initForDecrypt(myPair);
                    final byte[] myResult = myEncryptor.decrypt(myEncrypted);
                </source>
            </subsection>
        </section>
        <section name="Algorithms">
            <p>The following encryptor algorithms are supported</p>
            <table class="defTable">
                <tr><th class="defHdr">Algorithm</th><th class="defHdr">Variants</th><th>Notes</th></tr>
                <tr><td>RSA</td><td>SHA224, SHA256, SHA384, SHA512</td><td/></tr>
                <tr><td>ElGamal</td><td>SHA224, SHA256, SHA384, SHA512</td><td/></tr>
                <tr><td>EC</td><td/><td>Available for EC, GOST2012 and SM2 keys, Not available for JCA</td></tr>
                <tr><td>SM2</td><td>C1C2C3, C1C3C2</td><td>Available for EC, GOST2012 and SM2 keys</td></tr>
                <tr><td>McEliece</td><td>Standard, KobaraImai, Fujisaki, Pointcheval</td><td/></tr>
            </table>
        </section>
    </body>
</document>
