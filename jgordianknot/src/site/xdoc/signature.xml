<document>
    <properties>
        <title>GordianKnot Asymmetric Signatures</title>
        <author email="Tony.Washer@yahoo.co.uk">Tony Washer</author>
    </properties>
    <body>
        <section name="Overview">
            <p>Signatures are supported via the <strong>GordianSignatureFactory</strong> interface.</p>
            <p>Algorithms are represented by <b>GordianSignatureSpec</b>. A <b>GordianSignature</b> is obtained via the signatureSpec,
                and then signatures are generated or verified  by the signer.</p>
            <p>The <b>LMS</b> and <b>XMSS</b> signature schemes are stateful signature schemes and as such their keyPairs support the
                <b>GordianStateAwareKeyPair</b> interface which allows sharding of the privateKey</p>
        </section>
        <section name="Sample">
            <source>
                /* Access factory */
                final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                final GordianKeyPairFactory myKeyPairFactory = myBase.getKeyPairFactory();
                final GordianSignatureFactory mySignatureFactory = myKeyPairFactory.getSignatureFactory();

                /* Access keyPairGenerator */
                final GordianKeyPairSpec mySpec = GordianKeyPairSpec.rsa(GordianRSAModulus.MOD2048);
                final GordianKeyPairGenerator myGenerator = myKeyPairFactory.getKeyPairGenerator(mySpec);
                final GordianKeyPair myKeyPair = myGenerator.generateKeyPair();
                GordianKeyPair mySigningPair = myKeyPair;

                /* If the pair is StateAware */
                if (myKeyPair instanceof GordianStateAwareKeyPair) {
                    /* Extract a shard that can sign a single entity */
                    final GordianKeyPair mySigningPair = ((GordianStateAwareKeyPair) myKeyPair).getKeyPairShard(1);

                    /* Store updated keyPair back to store BEFORE signing to ensure this shard is not reused */
                }

                /* Access signer */
                final GordianSignatureSpec mySignSpec = GordianSignatureSpec.rsa(GordianSignatureType.PSSMGF1,
                                                                                 GordianDigestSpec.sha2(GordianLength.LEN_256));
                final GordianSignature mySigner = mySignatureFactory.createSigner(mySignSpec);

                /* Sign message */
                final byte[] message = ....;
                mySigner.initForSigning(mySigningPair);
                mySigner.update(message);
                final byte[] mySignature = mySigner.sign();

                /* Verify signature */
                mySigner.initForVerify(myKeyPair);
                mySigner.update(message);
                final boolean verified = mySigner.verify(mySignature);
            </source>
        </section>
        <section name="Composite Signatures">
            <p>Composite signatures may be created by a composite keyPair, as long as each element of the composite keyPair is assigned a valid signatureSpec.
                The resulting signatures are encoded as an ASN1Sequence.</p>
            <subsection name="Sample">
                <source>
                    /* Access factory */
                    final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                    final GordianKeyPairFactory myKeyPairFactory = myBase.getKeyPairFactory();
                    final GordianSignatureFactory mySignatureFactory = myKeyPairFactory.getSignatureFactory();

                    /* Access keyPairGenerator */
                    final GordianKeyPairSpec mySpec = GordianKeyPairSpec.composite(GordianKeyPairSpec.rsa(GordianRSAModulus.MOD2048),
                                                                                   GordianKeyPairSpec.ed25519());
                    final GordianKeyPairGenerator myGenerator = myKeyPairFactory.getKeyPairGenerator(mySpec);
                    final GordianKeyPair myKeyPair = myGenerator.generateKeyPair();
                    GordianKeyPair mySigningPair = myKeyPair;

                    /* Access signer */
                    final GordianSignatureSpec mySignSpec = GordianSignatureSpec.composite(GordianSignatureSpec.rsa(GordianSignatureType.PSSMGF1,
                                                                                                                    GordianDigestSpec.sha2(GordianLength.LEN_256)),
                                                                                           GordianSignatureSpec.edDSA());
                    final GordianSignature mySigner = mySignatureFactory.createSigner(mySignSpec);

                    /* Sign message */
                    final byte[] message = ....;
                    mySigner.initForSigning(mySigningPair);
                    mySigner.update(message);
                    final byte[] mySignature = mySigner.sign();

                    /* Verify signature */
                    mySigner.initForVerify(myKeyPair);
                    mySigner.update(message);
                    final boolean verified = mySigner.verify(mySignature);
                </source>
            </subsection>
        </section>
        <section name="Algorithms">
            <p>The following signature algorithms are supported.</p>
            <table class="defTable">
                <tr><th class="defHdr">Algorithm</th><th class="defHdr">Variants</th></tr>
                <tr><td>RSA</td><td>PSSMGF1, PSS128, PSS256, X931, ISO9796D2, PreHash</td></tr>
                <tr><td>DSA</td><td>DSA, DetDSA</td></tr>
                <tr><td>EC</td><td>ECDSA, ECDetDSA, ECNR</td></tr>
                <tr><td>DSTU4145</td><td>Native</td></tr>
                <tr><td>GOST2012</td><td>Native</td></tr>
                <tr><td>SM2</td><td>Native</td></tr>
                <tr><td>EdDSA</td><td>Native</td></tr>
                <tr><td>SPHINCSPLUS</td><td>Native</td></tr>
                <tr><td>DILITHIUM</td><td>Native</td></tr>
                <tr><td>FALCON</td><td>Native</td></tr>
                <tr><td>PICNIC</td><td>Native</td></tr>
                <tr><td>XMSS</td><td>Native, PreHash</td></tr>
                <tr><td>LMS</td><td>Native</td></tr>
            </table>
        </section>
    </body>
</document>
