<document>
    <properties>
        <title>GordianKnot Asymmetric Signatures</title>
        <author email="Tony.Washer@yahoo.co.uk">Tony Washer</author>
    </properties>
    <body>
        <section name="Overview">
            <p>Algorithms are represented by <b>GordianSignatureSpec</b>. A <b>GordianSignature</b> is obtained via the signatureSpec,
                and then signatures are generated or verified  by the signer.</p>
            <p>The <b>LMS</b> and <b>XMSS</b> signature schemes are stateful signature schemes and as such their keyPairs support the
                <b>GordianStateAwareKeyPair</b> interface which allows sharding of the privateKey</p>
        </section>
        <section name="Sample">
            <source>
                /* Access factory */
                final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                final GordianAsymFactory myKeyPairFactory = myBase.getAsymmetricFactory();
                final GordianSignatureFactory mySignatureFactory = myKeyPairFactory.getSignatureFactory();

                /* Access keyPairGenerator */
                final GordianAsymKeySpec mySpec = GordianAsymKeySpec.rsa(GordianRSAModulus.MOD2048);
                final GordianKeyPairGenerator myGenerator = myKeyPairFactory.getKeyPairGenerator(mySpec);
                final GordianKeyPair myPair = myGenerator.generateKeyPair();
                GordianKeyPair mySigningPair = myKeyPair;

                /* If the pair is StateAware */
                if (myPair instanceof GordianStateAwareKeyPair) {
                    /* Extract a shard that can sign a single entity */
                    final GordianKeyPair mySigningPair = ((GordianStateAwareKeyPair) myPair).getKeyPairShard(1);

                    /* Store updated keyPair back to store BEFORE signing to ensure this shard is not reused */
                }

                /* Access signer */
                final GordianSignatureSpec mySignSpec = GordianSignatureSpec.rsa(GordianSignatureType.PSS,
                GordianDigestSpec.sha2(GordianLength.LEN_256));
                final GordianSignature mySigner = mySignatureFactory.createSigner(mySignSpec);

                /* Sign message */
                final byte[] message = ....;
                mySigner.initForSigning(mySigningPair);
                mySigner.update(message);
                final byte[] mySignature = mySigner.sign();

                /* Verify signature */
                mySigner.initForVerify(myPair);
                mySigner.update(message);
                final boolean verified = mySigner.verify(mySignature);
            </source>
        </section>
        <section name="Algorithms">
            <p>The following signature algorithms are supported.</p>
            <table class="defTable">
                <tr><td class="defHdr">Algorithm</td><td class="defHdr">Variants</td></tr>
                <tr><td>RSA</td><td>PSS, X931, ISO9796D2, PreHash</td></tr>
                <tr><td>DSA</td><td>DSA, DetDSA</td></tr>
                <tr><td>EC</td><td>ECDSA, ECDetDSA, ECNR</td></tr>
                <tr><td>DSTU4145</td><td>Native</td></tr>
                <tr><td>GOST2012</td><td>Native</td></tr>
                <tr><td>SM2</td><td>Native</td></tr>
                <tr><td>EdDSA</td><td>Pure, PreHash</td></tr>
                <tr><td>Rainbow</td><td>Native</td></tr>
                <tr><td>SPHINCS256</td><td>PreHash</td></tr>
                <tr><td>XMSS</td><td>Pure, PreHash</td></tr>
                <tr><td>QTESLA</td><td>Pure</td></tr>
                <tr><td>LMS</td><td>Pure</td></tr>
            </table>
        </section>
    </body>
</document>
