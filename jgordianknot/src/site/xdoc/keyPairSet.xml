<document>
    <properties>
        <title>GordianKnot KeyPairSets</title>
        <author email="Tony.Washer@yahoo.co.uk">Tony Washer</author>
    </properties>
    <body>
        <section name="Overview">
            <p>KeyPairSets are supported via the <strong>GordianKeyPairSetFactory</strong> interface.</p>
            <p>GordianKnot supports the notion of a KeyPairSet, which is a set of keyPairs of similar functionality.
                The keyPairSets may be used to produced combined signatures, encryptions or agreements as appropriate</p>
            <p>In all cases the API is very similar to that for the equivalent keyPair operations</p>
            <p>The available keyPairSets are as follows
                <table class="defTable">
                    <tr><th>Name</th><th>KeyPairs</th></tr>
                    <tr><td>SIGNEDLO</td><td>RSA(MOD2048), EC(secp256r1), Ed25519</td></tr>
                    <tr><td>SIGNEDHI</td><td>RSA(MOD3072), EC(secp521r1), Ed448</td></tr>
                    <tr><td>AGREELO</td><td>DH(FFDHE2048), EC(secp256r1), X25519</td></tr>
                    <tr><td>AGREEHI</td><td>DH(FFDHE3072), EC(secp521r1), X448</td></tr>
                    <tr><td>ENCRYPT</td><td>RSA(MOD2048), ELGAMAL(FFDHE2048), SM2(sm2p256v1)</td></tr>
                </table>
            </p>
        </section>
        <section name="KeyPairSet Generation">
            <p>A keyPairSet can be generated by specifying a <strong>GordianKeyPairSetSpec</strong>. Each keyPair in the keyPairSet is generated randomly.</p>
            <subsection name="Sample">
                <source>
                    /* Access factory */
                    final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                    final GordianKeySetFactory myKeySetFactory = myBaseFactory.getKeySetFactory();
                    final GordianKeyPairSetFactory myKeyPairSetFactory = myKeySetFactory.getKeyPairSetFactory();

                    /* Create keyPairSet */
                    final GordianKeyPairSetSpec mySpec = GordianKeyPairSetSpec.SIGNEDLO;
                    final GordianKeyPairSetGenerator myGenerator = myKeyPairSetFactory.getKeyPairSetGenerator(mySpec);
                    final GordianKeyPairSet myKeyPairSet = myGenerator.generateKeyPairSet();
                </source>
            </subsection>
        </section>
        <section name="KeyPairSet Signature">
            <subsection name="Algorithm">
                <ol>
                    <li>Update each signer with the data in parallel.</li>
                    <li>On signing create the signature and pass it to the next signer prior
                        to creating the next signature</li>
                    <li>The signature is an ASN1 structure containing the keyPairSetSpec and all the signatures</li>
                </ol>
            </subsection>
            <subsection name="Sample">
                <source>
                    /* Access factory */
                    final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                    final GordianKeySetFactory myKeySetFactory = myBaseFactory.getKeySetFactory();
                    final GordianKeyPairSetFactory myKeyPairSetFactory = myKeySetFactory.getKeyPairSetFactory();

                    /* Create keyPairSet */
                    final GordianKeyPairSetSpec mySpec = GordianKeyPairSetSpec.SIGNLO;
                    final GordianKeyPairSetGenerator myGenerator = myKeyPairSetFactory.getKeyPairSetGenerator(mySpec);
                    final GordianKeyPairSet myKeyPairSet = myGenerator.generateKeyPairSet();

                    /* Create signer */
                    final GordianKeyPairSetSigner mySigner = myKeyPairSetFactory.createSigner(mySpec);

                    /* Sign message */
                    final byte[] message = ....;
                    mySigner.initForSigning(mySigningPair);
                    mySigner.update(message);
                    final byte[] mySignature = mySigner.sign();

                    /* Verify signature */
                    mySigner.initForVerify(myPair);
                    mySigner.update(message);
                    final boolean verified = mySigner.verify(mySignature);
                </source>
            </subsection>
        </section>
        <section name="KeyPairSet Agreement">
            <subsection name="Algorithm">
                <p>Agreement is performed by obtaining the equivalent byteArray agreement for each
                    keyPairSet in turn, and then treating the combined array of the agreements as
                    the raw secret that is used to generate the desired result.</p>
                <p>Only AgreementTypes ANONYMOUS, SIGNED and UNIFIED(with/without confirm) are supported</p>
            </subsection>
            <subsection name="Sample">
                <source>
                    /* Access factory */
                    final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                    final GordianKeySetFactory myKeySetFactory = myBaseFactory.getKeySetFactory();
                    final GordianKeyPairSetFactory myKeyPairSetFactory = myKeySetFactory.getKeyPairSetFactory();

                    /* Create keyPairSet */
                    final GordianKeyPairSetSpec mySpec = GordianKeyPairSetSpec.ENCRYPT;
                    final GordianKeyPairSetGenerator myGenerator = myKeyPairSetFactory.getKeyPairSetGenerator(mySpec);
                    final GordianKeyPairSet myKeyPairSet = myGenerator.generateKeyPairSet();

                    /* Create anonymous agreement */
                    final GordianKeyPairSetAgreementSpec myAgreeSpec = GordianKeyPairSetAgreementSpec.anon(mySpec);
                    final GordianSymCipherSpec myCipherSpec = GordianSymCipherSpec.cbc(GordianGordianSymKeySpec.aes(GordianLength.LEN_256), GordianPadding.PKCS7);
                    final GordianKeyPairSetAnonymousAgreement myAnonClient = (GordianKeyPairSetAnonymousAgreement) myKeyPairSetFactory.createAgreement(myAgreeSpec);
                    final GordianKeyPairSetAnonymousAgreement myAnonServer = (GordianKeyPairSetAnonymousAgreement) myKeyPairSetFactory.createAgreement(myAgreeSpec);

                    /* Client side */
                    myAnonClient.setResultType(myCipherSpec);
                    final byte[] myClientHello = myAnonClient.createClientHello(myServerPair);
                    final GordianSymCipher[] myClientCiphers = (GordianSymCipher[]) myAnonClient.getResult();

                    /* Send myClientHello to server */

                    /* Server side */
                    myAnonServer.acceptClientHello(myServerPair, myClientHello);
                    final GordianSymCipherSpec myResultCipherSpec = (GordianSymCipherSpec) myAnonServer.getResultType();
                    final GordianSymCipher[] myServerCiphers = (GordianSymCipher[]) myAnonServer.getResult();
                </source>
            </subsection>
        </section>
        <section name="KeyPairSet Encryption">
            <subsection name="Algorithm">
                <p>Encryption is performed by simply encrypting by each keyPairSet in turn.</p>
            </subsection>
            <subsection name="Sample">
                <source>
                    /* Access factory */
                    final GordianFactory myBaseFactory = GordianGenerator.createFactory();
                    final GordianKeySetFactory myKeySetFactory = myBaseFactory.getKeySetFactory();
                    final GordianKeyPairSetFactory myKeyPairSetFactory = myKeySetFactory.getKeyPairSetFactory();

                    /* Create keyPairSet */
                    final GordianKeyPairSetSpec mySpec = GordianKeyPairSetSpec.ENCRYPT;
                    final GordianKeyPairSetGenerator myGenerator = myKeyPairSetFactory.getKeyPairSetGenerator(mySpec);
                    final GordianKeyPairSet myKeyPairSet = myGenerator.generateKeyPairSet();

                    /* Create encryptor */
                    final GordianKeyPairSetEncryptor myEncryptor = myKeyPairSetFactory.createEncryptor(mySpec);

                    /* Encrypt data as one-off */
                    final byte[] myMessage = ...
                    byte[] myEncrypted = myEncryptor.encryptBytes(myMessage);
                    byte[] myResult = myEncryptor.decryptBytes(myEncrypted);
                </source>
            </subsection>
         </section>
    </body>
</document>
