<document>
    <properties>
        <title>GordianKnot ZipFile Support</title>
        <author email="Tony.Washer@yahoo.co.uk">Tony Washer</author>
    </properties>
    <body>
        <section name="Overview">
            <p>GordianKnot provides support for to creating and reading encrypted ZipFiles.
                This is built on top of the Java ZipFile support and utilises the encryption facilities of GordianKnot to encrypt and
                decrypt each file entry. LZMA compression is also provided (based on the 7-Zip LZMA SDK), which provides significantly
                improved compression over the Deflation standard Java method.</p>
            <p>Encryption is performed in a similar fashion to KeySet encryption, as follows (N = number of configured encryption steps),
                although all keys and initialisationVectors are randomly generated per zipEntry. The selection of encryption algorithms is
                also randomly done rather than from a seed value</p>
            <ol>
                <li>Digest is calculated on the plain text</li>
                <li>LZMA compression is performed</li>
                <li>StreamKey encryption is performed</li>
                <li>(N-1)*SymKey ECB encryption (first with ISO7816-4 padding, remainder with NONE)</li>
                <li>SymKey SIC encryption</li>
                <li>Mac calculated on encrypted data</li>
            </ol>
            <p>All filenames in the public zipFile directory are written as File1, File2 etc to further hide information</p>.
            <p>The names of the files, and the (wrapped) encryption details are written as an encrypted final zipEntry</p>
            <p>The keySetHash used to encrypt the final file entry is recorded as additionalData for the directory entry</p>
            <p>Note that updating of ZipFiles is not supported, only creation and extraction.</p>
        </section>
        <section name="Sample Creation of Encrypted ZipFile">
            <p>The following sample reads a designated file directory and creates an encrypted zipFile of the contents</p>
            <source>
                /* Access factory */
                final GordianParameters myParams = new GordianParameters();
                final GordianFactory myBaseFactory = GordianGenerator.createFactory(myParams);
                final GordianZipFactory myZipFactory = myBaseFactory.getZipFactory();
                final GordianKeySetFactory myKeySets = pFactory.getKeySetFactory();

                /* Create new Password Hash */
                final char[] myPassword = .....
                final GordianKeySetHashSpec mySpec = new GordianKeySetHashSpec(new GordianKeySetSpec(pKeyLen));
                final GordianKeySetHash myHash = myKeySets.generateKeySetHash(mySpec, myPassword);

                /* Initialise the Zip file */
                final ByteArrayOutputStream myZipStream = new ByteArrayOutputStream();
                final GordianZipWriteFile myZipFile = myZipFactory.createZipFile(myHash, myZipStream);

                /* Obtain list of files */
                file File myDirectory = ....
                final File[] myFiles = pDirectory.listFiles();

                /* Loop through the files in the directory */
                for (File myFile : myFiles) {
                    /* Skip directories */
                    if (myFile.isDirectory()) {
                        continue;
                    }

                    /* Open the file for reading */
                    InputStream myInFile = new FileInputStream(myFile);
                    InputStream myInBuffer = new BufferedInputStream(myInFile);

                    /* Open the zipEntry stream */
                    OutputStream myOutput = myZipFile.createOutputStream(new File(myFile.getName()), true);

                    /* Copy file content to zip file */
                    myInBuffer.transferTo(myOutput);

                    /* Close files */
                    myInBuffer.close();
                    myOutput.close();
                }

                /* Close Zip file */
                myZipFile.close();

                /* ZipFile as byte array */
                final byte[] myBytes = myZipStream.toByteArray();
            </source>
        </section>
        <section name="Sample Parsing of Encrypted ZipFile">
            <p>The following sample reads the contents of an encrypted zipFile</p>
            <source>
                /* Access factory */
                final GordianParameters myParams = new GordianParameters();
                final GordianFactory myBaseFactory = GordianGenerator.createFactory(myParams);
                final GordianZipFactory myZipFactory = myBaseFactory.getZipFactory();
                final GordianKeySetFactory myKeySets = pFactory.getKeySetFactory();

                /* Access the file (bytes from previous sample) */
                final ByteArrayInputStream myInputStream = new ByteArrayInputStream(myBytes);
                final GordianZipReadFile myZipFile = myZipMgr.openZipFile(myInputStream);

                /* Unlock the file */
                final byte[] myHashBytes = myZipFile.getHashBytes();
                final char[] myPassword = ....
                final GordianKeySetHash myHash = myKeySets.deriveKeySetHash(myHashBytes, myPassword);
                myZipFile.setKeySetHash(myHash);

                /* Access the contents */
                final GordianZipFileContents myContents = myZipFile.getContents();

                /* Loop through the entries */
                final Iterator&lt;GordianZipFileEntry&gt; myIterator = myContents.iterator();
                while (myIterator.hasNext()) {
                    /* Access next entry */
                    final GordianZipFileEntry myEntry = myIterator.next();
                    final InputStream myZipInput = myZipFile.createInputStream(myEntry);

                    /* Read the data */
                    final byte[] myZipData = myZipInput.readAllBytes();
                }
            </source>
        </section>
    </body>
</document>
