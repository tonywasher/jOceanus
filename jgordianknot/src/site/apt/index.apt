JGordianKnot Project

  jGordianKnot is a subComponent of the jOceanus project. 

  jGordianKnot is a security suite for Java based on the BouncyCastle cryptography library. To utilise it you must
additionally download this library from the {{{http://www.bouncycastle.org/java.html}BouncyCastle webSite}}
  
  Encryption is performed using a set of keys called a <<KeySet>> (one key for each supported algorithm). A subset of
the keys is selected at random (using a SecureRandom instance) from the KeySet, and the plaintext is encrypted 
by each key in turn. The types of the keys used are encoded into output ciphertext along with the randomly chosen
initialisation vector (which is shifted differently for each key). 

  The last cipher mode is set to SIC mode. All prior modes are set to CBC mode. The first CBC mode is set to use ISO7816-4 padding,
all others use no padding. The number of encryption steps is configurable.

  A KeySet may be defined by a <<KeySetHash>>. This KeySetHash is built from a password and a randomly selected set of three
HMac algorithms using a simple variant of PBKDF2. One of the MACs (the secret MAC) is also fed the intermediate results of
the other two MACs. The non secret MACs are calculated and feed into a MessageDigest algorithm (default KECCAK) and combined
with the initialisation vector and HMac types to provide an external Hash. The result of the secret Mac is then used to generate
keys for the KeySet via another variant of the PBKDF2 algorithm.

  On resolving a KeySetHash with a password to obtain the KeySet the algorithm is repeated and the resulting external hash is 
compared with the expected hash. If it matches, the password is assumed correct and the keySet will be generated. In the unlikely
event of a collision on the hash, it is virtually impossible for the same keySet to be generated.  

  KeyWrapping is also supported using a variant of the AES-KW algorithm that uses CBC mode rather than ECB mode.

* Supported Algorithms

  The following symmetric key algorithms are supported for 128/256 byte keys. You will only be able to use 256 byte keys
if you are able to access the <<UNLIMITED>> strength JCE policy files.

    * AES

    * Serpent

    * TwoFish

    * CAMELLIA

    * CAST6

    * RC6

    * ThreeFish (unrestricted keys)
 
    * Noekeon (restricted keys)

    * SM4 (restricted keys)

    * SEED (restricted keys) 

  The following modes are available for the above keys

    * CBC
 
    * OFB

    * CFB

    * SIC (CTR)

  The following Stream Key algorithms are supported (bracketed versions used for restricted keys).

    * ChaCha

    * Salsa20

    * XSalsa20 (unrestricted keys)

    * HC256(HC128 for restricted keys)

    * VMPC 

    * ISAAC 

    * Grain128 (restricted keys)

  The following MessageDigest algorithms are supported.

    * SHA2

    * Tiger

    * WHIRLPOOL

    * GOST1411

    * RIPEMD320

    * KECCAK

    * Skein

    * SM3

    * Blake2b

  The following Mac Algorithms are supported

    * HMac (for each supported message digest)

    * GMac (for each symmetric algorithm except for ThreeFish)

    * Poly1305 (for each symmetric algorithm except for ThreeFish)

    * SkeinMAC

    * VMPCMAC

ZipFile support

  In addition to Encryption services, JGordianKnot also provides support for to creating and reading encrypted ZipFiles.
This is built on top of the Java ZipFile support and utilises the encryption facilities of JGordianKnot to encrypt and
decrypt each file entry. LZMA compression is also provided (based on the 7-Zip LZMA SDK), which provides significantly
improved compression over the Deflation standard Java method.

  Encryption is performed in a similar fashion to <<KeySet>> encryption, as follows (N = number of configured encryption steps)

     [[1]] Digest is calculated on the plain text
     [[2]] LZMA compression is performed
     [[3]] StreamKey encryption is performed
     [[4]] (N-1)*SymKey CBC encryption (all with ISO7816-4 padding)
     [[5]] SymKey SIC encryption 
     [[6]] HMac calculated on encrypted data
	
  The ZipFile directory is additionally encrypted, so as to restrict information leakage.

  Note that updating of ZipFiles is not supported, only creation and extraction.
