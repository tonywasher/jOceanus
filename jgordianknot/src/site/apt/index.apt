GordianKnot Project

  GordianKnot is a subComponent of the jOceanus project. 

  GordianKnot is a security suite for Java based on the BouncyCastle cryptography library. To utilise it you must
additionally download this library from the {{{http://www.bouncycastle.org/java.html}BouncyCastle webSite}}

  In the first instance, GordianKnot provides a simple API on top of BouncyCastle providing access to 
the various BouncyCastle primitives such as symmetric/stream ciphers, digests/Macs and asymmetricKey functionality.  
Details are provided in the section <<Simple API>>.

  It also build on this API to provide various extensions such as triple encryption and encrypted ZipFiles.   	
  
  Encryption is performed using a set of keys called a <<KeySet>> (one key for each supported algorithm). A subset of
the keys is selected at random (using a SecureRandom instance) from the KeySet, and the plainText is encrypted 
by each key in turn. The types of the keys used are encoded into output cipherText along with the randomly chosen
initialisation vector (which is transformed via an HMac differently for each key). 

  The last cipher mode is set to SIC mode. All prior modes are set to ECB mode. The first ECB mode is set to use ISO7816-4 padding,
all others use no padding. The number of encryption steps is configurable.

  A KeySet may be defined by a <<KeySetHash>>. This KeySetHash is built from a password and a randomly selected set of three
HMac algorithms using a simple variant of PBKDF2. One of the MACs (the secret MAC) is also fed the intermediate results of
the other two MACs. The non secret MACs are calculated and feed into a MessageDigest algorithm (default KECCAK) and combined
with the initialisation vector and HMac types to provide an external Hash. The result of the secret Mac is then used to generate
keys for the KeySet via another variant of the PBKDF2 algorithm.

  On resolving a KeySetHash with a password to obtain the KeySet the algorithm is repeated and the resulting external hash is 
compared with the expected hash. If it matches, the password is assumed correct and the keySet will be generated. In the unlikely
event of a collision on the hash, it is virtually impossible for the same keySet to be generated.  

  KeyWrapping is also supported using a variant of the RFC 5649 algorithm that caters for blockSizes other than 128. Details
are provided here.  

Simple API

* Configuration

  GordianKnot is initialised with two separate boolean parameters, providing four possible setups
  	
  	[[1]] Use JCE or Native BouncyCastle
  	
  	[[2]] Use restricted (128-bit) or unrestricted (256-bit) keys
  	
  You will only be able to use 256 byte keys if you are able to access the <<UNLIMITED>> strength JCE policy files. 
Not all of BouncyCastle functionality is available through the JCE and so there will be a subset of functionality available in this mode.
    	
* Symmetric Encryption

  A cipher for encryption/decryption is created by specifying a CipherSpec (Algorithm/BlockSize if needed) and a mode, plus padding if required.
The cipher can be used for encryption of byte streams in the same fashion as the standard JCA Cipher class. In addition a wrapCipher can be created 
for each algorithm as defined in <<Key Wrapping>>.

** Supported Algorithms

  The following symmetric key algorithms are supported.  

*-------------*-------------*------------*-------*
| Algorithm   | BlockLength | KeyLengths | Notes |
*-------------*-------------*------------*-------*    
| AES         | 128         | 128,256    ||  
*-------------*-------------*------------**
| Serpent     | 128         | 128,256    ||  
*-------------*-------------*------------**
| TwoFish     | 128         | 128,256    ||  
*-------------*-------------*------------**
| CAMELLIA    | 128         | 128,256    ||  
*-------------*-------------*------------**
| CAST6       | 128         | 128,256    ||  
*-------------*-------------*------------**
| RC6         | 128         | 128,256    ||  
*-------------*-------------*------------**
| ARIA        | 128         | 128,256    ||  
*-------------*-------------*------------**
| ThreeFish   | 256         | 256        ||  
*-------------*-------------*------------**
| NoeKeon     | 128         | 128        ||  
*-------------*-------------*------------**
| SM4         | 128         | 128        ||  
*-------------*-------------*------------**
| SEED        | 128         | 128        ||  
*-------------*-------------*------------**
| SKIPJACK    | 64          | 128        ||  
*-------------*-------------*------------**
| BlowFish    | 64          | 128,256    ||  
*-------------*-------------*------------**
| DESede      | 64          | 128        ||  
*-------------*-------------*------------**
| CAST5       | 64          | 128        ||  
*-------------*-------------*------------**
| RC5         | 64          | 128        ||
*-------------*-------------*------------**
| RC2         | 64          | 128, 256   ||
*-------------*-------------*------------**
| IDEA        | 64          | 128        ||
*-------------*-------------*------------**
| TEA         | 64          | 128        ||
*-------------*-------------*------------**
| XTEA        | 64          | 128        ||
*-------------*-------------*------------**
| Magma       | 64          | 256        | GOST28147 |
*-------------*-------------*------------**
| SHACAL2     | 256         | 128, 256   ||
*-------------*-------------*------------*----------*
| Kalyna      | 128         | 128, 256   | DSTU7624 |
|             | 256         | 256        |          |
*-------------*-------------*------------*----------*
| Kuznyechik  | 128         | 256        | GOST3412-2015 |
*-------------*-------------*------------*----------*
| Speck       | 64          | 128        | Not for JCA |
|             | 128         | 128, 256   | |
*-------------*-------------*------------*----------*
| Simon       | 128         | 128, 256   | Not for JCA |
*-------------*-------------*------------*----------*
| MARS        | 128         | 128, 256   | Not for JCA |
*-------------*-------------*------------*----------*
| Anubis      | 128         | 128, 256   | Not for JCA |
*-------------*-------------*------------*----------*

** Supported Modes

  The following modes are available with the above algorithms

*------*-------*
| Mode | Notes |
*------*-------*
| ECB  | |
*------*-*
| CBC  | K3413CBC Mode available for Kuznyechik |
*------*--------------------------------*
| SIC  | KCTR Mode available for Kalyna |
|      | K3413CTR Mode available for Kuznyechik |
*------*--------------------------------*
| OFB  | GOFB Mode available for Magma  |
|      | K3413OFB Mode available for Kuznyechik |
*------*--------------------------------*
| CFB  | GCFB Mode available for Magma  |
|      | K3413CFB Mode available for Kuznyechik |
*------*--------------------------------*
| EAX  | |
*------*--------------------------------*
| GCM  | KGCM Mode available for Kalyna |
*------*--------------------------------*
| CCM  | KCCM Mode available for Kalyna |
*------*--------------------------------*
| OCB  | |
*------*-* 	

** Supported Paddings

  The following paddings are available for ECB and CBC modes

*---------*-------*
| Padding | Notes |
*---------*-------*
| CTS | |
*---------*-------*
| ISO7816-4 | |
*---------*-------* 
| PKCS7 | |
*---------*-------*
| X9.63 | |
*---------*-------*
| TBC | |
*---------*-------*   
| NONE | used for all modes other than ECB/CBC |
*---------*-------*
    
* {Key Wrapping}

	Key Wrapping is performed by GordianKnot using a variant of the AES Key Wrapping algorithm specified in {{{https://tools.ietf.org/html/rfc5649}RFC 5649}}.
	
	The differences are necessary to enable support of ciphers that do not have the standard blockSize of 128 bits, since RFC 5649 assumes a 128 bit blockSize.
	
	[[1]] For blockSizes of 256 bits, the 32-bit Integrity Vector of <<0xA65959A6>> is expanded to the 96-bit <<0xA65959A6A65959A6A65959A6>> so that when combined with
	the 32-bit dataLen of the wrapped data it comprises the half-block needed for the wrapping algorithm. This method can be extended to support any block size >= 128.
	
	[[2]] For blockSizes of 64, the Integrity Vector using the above adjustment becomes zero length, which is not very useful. In this case, we retain the 
	standard 32-bit	Integrity Vector of <<0xA65959A6>> and prefix the 32-bit dataLen to the data to be wrapped.
	
	[]
	
	In addition, a block of random data is inserted immediately prior to the data to be wrapped.
	
* StreamKey Encryption 	    

  The following Stream Key algorithms are supported.

*-------------*-------------*------------*
| Algorithm   | KeyLengths  | Notes      |
*-------------*-------------*------------*    
| ChaCha      | 128,256     | | 
*-------------*-------------*-*    
| ChaCha7539  | 256         | |  
*-------------*-------------*-*    
| Salsa20     | 128,256     | |  
*-------------*-------------*-*    
| XSalsa20    | 256         | |  
*-------------*-------------*-*    
| HC128       | 128         | |  
*-------------*-------------*-*    
| HC256       | 256         | |  
*-------------*-------------*-*    
| VMPC        | 128,256     | |  
*-------------*-------------*-------------*     
| ISAAC       | 128,256     | Not for JCA |  
*-------------*-------------*-------------*     
| RC4         | 128,256     | |  
*-------------*-------------*-*    
| Grain128    | 128         | |  
*-------------*-------------*-*    
| Sosemanuk   | 128,256     | Not for JCA |  
*-------------*-------------*-*    

* Digests and MACs

** Supported Digest algorithms

*-------------*-------------*-----------------*------------*
| Algorithm   | StateLength | OutputLengths   | Notes      |
*-------------*-------------*-----------------*---------=--*    
| SHA2        | 512         | 224,256,384,512 | |
|             | 256         | 224 256 | |
*-------------*-----------------*-*-*   
| Tiger       |             | 192 | |  
*-------------*-------------*-----*-*    
| WHIRLPOOL   |             | 512 | |  
*-------------*-------------*-----*-*    
| Streebog    | 256         | 256 | GOST3411-2012 |
|             | 512         | 512 | |  
*-------------*-------------*-----*-*    
| GOST        |             | 256 | GOST3411-94 |  
*-------------*-------------*-----*-*    
| RIPEMD      | 128         | 128,160 | |
|             | 256         | 256,320 | |  
*-------------*-------------*---------*-*    
| SHA3        |             | 224,256,384,512 | |  
*-------------*-------------*-----------------*-*    
| Skein       | 256         | 128,160,224,256         | |
|             | 512         | 128,160,224,256,384,512 | |
|             | 1024        | 384, 512, 1024          | |  
*-------------*-------------*-----------------*-*    
| SM3         |             | 256  | |  
*-------------*-------------*----*-*    
| Blake2s     | 256         | 128,160,224,256 | |
*-------------*-------------*----*-*    
| Blake2b     | 512         | 224,256,384,512 | |
*-------------*-------------*----*-*    
| SHA1        |             | 160 | |  
*-------------*-------------*----*-*    
| MD5         |             | 128 | |  
*-------------*-------------*----*-*    
| MD4         |             | 128 | |  
*-------------*-------------*----*-*    
| MD2         |             |128             | |  
*-------------*-------------*----*-*    
| SHAKE       | 128         | 128 | Not for JCA |
|             | 256         | 256 | |  
*-------------*-------------*----*-*    
| Kupyna      |             |256,384,512 | DSTU7564 |  
*-------------*-------------*----*-*    
| JH          |             |224,256,384,512 | Not for JCA |  
*-------------*-------------*----*-*    
| Groestl     |             |224,256,384,512 | Not for JCA |  
*-------------*-------------*----*-*    
  
** Supported MAC algorithms

*-------------*------------------*------------*
| Algorithm   | OutputLengths    | Notes      |
*-------------*------------------*------------*    
| HMac        | digest length    | For all digests. | 
|             |                  | Jca does not support SM3, BLAKE, SHAKE, JH, Groestl or Kupyna | 
*-------------*------------------*-*    
| GMac        | 128 bits         | For all supported 128 bit ciphers except Kalyna (BUG). |
|             |                  | Jca does not support Kuznyechik | 
*-------------*------------------*-*    
| CMac        | cipher blockSize | For all supported ciphers. |
|             |                  | Not for Jca | 
*-------------*-----------------*-*    
| Poly1305    | 128 bits         | For all supported 128 bit ciphers except Kuznyechik | 
|             |                  | Jca does not support Kalyna | 
*-------------*-----------------*-*    
| Skein       | as per Skein     | For all Skein digests | 
*-------------*-----------------*-*    
| VMPC        | 160 bits         | | 
*-------------*-----------------*-*    
| Blake       | as per Blake     | For all supported Blake2s/Blake2b digests | 
|             |                  | Not for Jca | 
*-------------*-----------------*-*    
| KupynaMac   | as per Kupyna    | For all supported Kupyna digests | 
|             |                  | Not for Jca | 
*-------------*-----------------*-*    
| KalynaMac   | as per Kalyna blockSize  | Not for Jca | 
*-------------*-----------------*-*    

 	
ZipFile support

  In addition to Encryption services, jGordianKnot also provides support for to creating and reading encrypted ZipFiles.
This is built on top of the Java ZipFile support and utilises the encryption facilities of jGordianKnot to encrypt and
decrypt each file entry. LZMA compression is also provided (based on the 7-Zip LZMA SDK), which provides significantly
improved compression over the Deflation standard Java method.

  Encryption is performed in a similar fashion to <<KeySet>> encryption, as follows (N = number of configured encryption steps)

     [[1]] Digest is calculated on the plain text

     [[2]] LZMA compression is performed

     [[3]] StreamKey encryption is performed

     [[4]] (N-1)*SymKey ECB encryption (first with ISO7816-4 padding, remainder with NONE)

     [[5]] SymKey SIC encryption 

     [[6]] Mac calculated on encrypted data
	
  The ZipFile directory is additionally encrypted, so as to restrict information leakage.

  Note that updating of ZipFiles is not supported, only creation and extraction.
